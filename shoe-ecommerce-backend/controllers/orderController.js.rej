diff a/backend/controllers/orderController.js b/backend/controllers/orderController.js	(rejected hunks)
@@ -1,43 +1,72 @@
 const Order = require('../models/Order')
 const Cart = require('../models/Cart')
 const Product = require('../models/Product')
+const validator = require('validator')
 
 // Place order: POST /api/orders
-exports.placeOrder = async(req, res, next) => {
-    try {
-        const userId = req.user.id;
-        const { shippingAddress, paymentMethod } = req.body;
-
-        if(!shippingAddress || !paymentMethod) {
-            return res.status(400).json({ message: 'Cart is empty' })
-        }
+exports.placeOrder = async (req, res, next) => {
+  try {
+    const userId = req.user.id;
+    const { shippingAddress, paymentMethod } = req.body;
 
-        const totalAmount = cart.items.reduce((sum, item) => sum + item.price * item.quantity, 0)
+    if (!shippingAddress || !shippingAddress.address || !shippingAddress.postalCode) {
+      return res.status(400).json({ message: 'Shipping address is required and must be complete' });
+    }
+    if (!validator.isLength(shippingAddress.address, { min: 5 })) {
+      return res.status(400).json({ message: 'Invalid address' });
+    }
+    if (!validator.isPostalCode(shippingAddress.postalCode, 'any')) {
+      return res.status(400).json({ message: 'Invalid postal code' });
+    }
 
-        // create order with snapshot of cart items
-        const order = await Order.create({
-            user: userId,
-            items: cart.items.map(item => ({
-                productId: item.productId,
-                name: item.name,
-                image: item.image,
-                price: item.price,
-                quantity: item.quantity,
-            })),
-            shippingAddress,
-            paymentMethod,
-            totalAmount,
-        });
+    const cart = await Cart.findOne({ userId });
+    if (!cart || cart.items.length === 0) {
+      return res.status(400).json({ message: 'Cart is empty' });
+    }
 
-        // clear cart
-        cart.items = [];
-        await cart.save();
+    // Validate products and stock
+    for (const item of cart.items) {
+      const product = await Product.findById(item.productId);
+      if (!product) {
+        return res.status(404).json({ message: `Product not found: ${item.name}` });
+      }
+      if (product.stock < item.quantity) {
+        return res.status(400).json({ message: `Insufficient stock for ${product.name}. Available: ${product.stock}` });
+      }
+    }
 
-        res.status(201).json({ success: true, order })
-    } catch(err) {
-        next(err)
+    // Reduce stock
+    for (const item of cart.items) {
+      await Product.findByIdAndUpdate(item.productId, {
+        $inc: { stock: -item.quantity },
+      });
     }
-}
+
+    const totalAmount = cart.items.reduce((sum, item) => sum + item.price * item.quantity, 0);
+
+    const order = await Order.create({
+      user: userId,
+      items: cart.items.map(item => ({
+        productId: item.productId,
+        name: item.name,
+        image: item.image,
+        price: item.price,
+        quantity: item.quantity,
+      })),
+      shippingAddress,
+      paymentMethod,
+      totalAmount,
+      paymentStatus: 'pending',
+    });
+
+    cart.items = [];
+    await cart.save();
+
+    res.status(201).json({ success: true, order });
+  } catch (err) {
+    next(err);
+  }
+};
 
 // GET /api/orders/my
 exports.getMyOrders = async(req, res, next) => {
